import hierarchyAliases from "@mindful-web/marko-web/utils/hierarchy-aliases";
import { getAsObject, get, getAsArray } from "@mindful-web/object-path";
import queryFragment from "../../graphql/fragments/content-list";
import getContentPreview from "../../utils/get-content-preview";

$ const { GAM, site } = out.global;
$ const { id, type, pageNode } = data;

$ const displayPublishedDate = ["event", "webinar", "contact"].includes(type) ? false : true;
$ const displayVenueBox = ['article', 'media-gallery'].includes(type) ? true : false;
$ const sectionsWithoutAds = [];

<marko-web-content-page-layout id=id type=type>
  <@head>
    <marko-web-gtm-content-context|{ context }| id=id>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-content-context>
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      $ const aliases = hierarchyAliases(content.primarySection);
      $ const adSlots = sectionsWithoutAds.includes(content.primarySection.alias) ? {} : {
        "gpt-ad-lb1": GAM.getAdUnit({ name: "lb1", aliases }),
        "gpt-ad-rail1": GAM.getAdUnit({ name: "rail1", aliases }),
        "gpt-ad-rail2": GAM.getAdUnit({ name: "rail2", aliases }),
      };
      <marko-web-gam-slots slots=adSlots />
      <global-gam-content-targeting-element obj=content />
    </marko-web-resolve-page>
  </@head>
  <@above-container>
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      $ const aliases = hierarchyAliases(content.primarySection);
      <if(!sectionsWithoutAds.includes(content.primarySection.alias))>
        <marko-web-gam-out-of-page-ad ...GAM.getAdUnit({ name: "wa", aliases }) />
        <marko-web-gam-out-of-page-ad ...GAM.getAdUnit({ name: "reskin", aliases }) />
      </if>
    </marko-web-resolve-page>
  </@above-container>
  <@page>

    <marko-web-resolve-page|{ data: content, resolved }| node=pageNode>
      $ const section = resolved.getAsObject("primarySection");
      $ const aliases = hierarchyAliases(content.primarySection);
      <marko-web-page-wrapper>
        <@section>
          <marko-web-gam-display-ad id="gpt-ad-lb1" />
        </@section>
        <@section>
          <div class="row">
            <div class="col">
              <default-theme-website-section-breadcrumbs section=content.primarySection />
              <marko-web-content-name tag="h1" class="page-wrapper__title" obj=content />
              <marko-web-content-teaser tag="p" class="page-wrapper__deck" obj=content />
              <if(content.type !== "contact")>
                <default-theme-content-attribution obj=content />
              </if>
              <default-theme-page-dates|{ blockName }|>
                <if(content.type === "event")>
                  <marko-web-content-start-date block-name=blockName obj=content />
                  <marko-web-content-end-date block-name=blockName obj=content />
                </if>
                <if(content.type === "webinar")>
                  <marko-web-content-start-date block-name=blockName obj=content />
                </if>
                <if(displayPublishedDate)>
                  <marko-web-content-published block-name=blockName obj=content />
                </if>
              </default-theme-page-dates>
              <marko-web-social-sharing
                path=content.siteContext.path
                providers=["email", "linkedin", "facebook", "twitter", "instagram", "pinterest"]
                title=content.name
                description=content.teaser
                media=get(content, "primaryImage.src")
              />
            </div>
          </div>
        </@section>
        <@section>
          <div class="row">
            <default-theme-page-contents|{ blockName }| class="col-lg-8 mb-3 mb-lg-0">
              <global-content-media-block content=content blockName=blockName />
              <default-theme-content-contact-details obj=content />
              $ const requiresRegistration = get(content, "userRegistration.isCurrentlyRequired");
              $ const accessLevels = getAsArray(content, "userRegistration.accessLevels");
              <marko-web-identity-x-access|context|
                enabled=requiresRegistration
                required-access-level-ids=accessLevels
              >
                <if(!context.canAccess || context.requiresUserInput)>
                  $ const defaultPreview = getContentPreview({ body: content.body, selector: "p:nth-of-type(1)" });
                  $ const podcastPreview = getContentPreview({ body: content.body, selector: "p:nth-of-type(-n+2)" });
                  $ const body = content.type === "podcast" ? podcastPreview : defaultPreview
                  <marko-web-content-body block-name=blockName obj={ body } />

                  <div class="content-page-preview-overlay" />
                  <global-content-page-gate
                    can-access=context.canAccess
                    is-logged-in=context.isLoggedIn
                    has-required-access-level=context.hasRequiredAccessLevel
                    requires-access-level=context.requiresAccessLevel
                    requires-user-input=context.requiresUserInput
                    messages=context.messages
                  />
                </if>
                <else>
                  <marko-web-content-body block-name=blockName obj=content />
                  <marko-web-content-sidebars block-name=blockName obj=content />
                  <if(type === "document" || type === "whitepaper")>
                    <default-theme-content-download obj=content>
                      <@wufoo user-name=site.get("wufoo.userName") />
                      <@link class="btn btn-lg btn-primary" />
                    </default-theme-content-download>
                  </if>
                  <if(content.type === "media-gallery")>
                    $ const images = getAsArray(content, 'images.edges').map(({ node }) => node);
                    <if(images.length)>
                      <div class="page-contents__images">
                        <for|image, index| of=images>
                          <div id=`image-${image.id}`>
                            <global-primary-image-block
                              obj=image
                              force-display=true
                            />
                          </div>
                        </for>
                      </div>
                    </if>
                  </if>
                  <if(content.type === 'top-list')>
                    $ const galleries = getAsArray(content, 'relatedTo.edges').map(({ node }) => node).filter(node => node.type === 'media-gallery');
                    <if(galleries.length)>
                      <for|gallery| of=galleries>
                        <global-body-media-gallery-element gallery=gallery />
                      </for>
                    </if>
                  </if>
                  <if(displayVenueBox === true)>
                    <global-featured-venues-suppliers content-id=content.id />
                  </if>
                </else>
              </marko-web-identity-x-access>
            </default-theme-page-contents>

            <aside class="col-lg-4 page-rail">
              <marko-web-gam-display-ad id="gpt-ad-rail1" />
              <global-related-content-block
                id=content.id
                type=type
                query-fragment=queryFragment
                section-id=section.id
                section-name=section.name
                native-x={ index: 4, name: 'primary', aliases }
              />
              <marko-web-gam-display-ad id="gpt-ad-rail2" />
            </aside>
          </div>

        </@section>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
  <@below-page>
    <marko-web-resolve-page|{ resolved, data: content }| node=pageNode>
      $ const section = resolved.getAsObject("primarySection");
      $ const aliases = hierarchyAliases(section);
      <global-content-load-more-block
        id=id
        type=type
        name=content.name
        display-ads=(!sectionsWithoutAds.includes(content.primarySection.alias))
        aliases=aliases
        section-id=section.id
        section-name=section.name
        section-skip=5
      >
      </global-content-load-more-block>
    </marko-web-resolve-page>
  </@below-page>
  <@foot>
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      <global-fixed-ad-bottom aliases=hierarchyAliases(content.primarySection) />
    </marko-web-resolve-page>
  </@foot>
</marko-web-content-page-layout>
